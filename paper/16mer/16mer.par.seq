# 786

import sys

def process(k, t):
   t.val += len(k)
   return k

def count(k, t):
   t.val += 1
   return k

def sym(k, t):
   def is_sym(s) -> bool: 
      match s:
         case s'A...T' or s'T...A' or s'C...G' or s'G...C' or s'N...N': 
            return is_sym(s[1:-1])
         case s'': return True
         default:  return False
   t.val += 1 if is_sym(k) else 0

I, J, K = 0, 0, 0
@atomic
def thread(block):
   i, j, k = Box(0), Box(0), Box(0)
   (iter(block)
    |> split(16, 1)
    |> process(i)
    |> count(j)
    |> sym(k))

   global I, J, K
   I += i.val
   J += j.val
   K += k.val

blocks(seqs(sys.argv[1]), 100000) ||> thread
print I, J, K

# 786

# benchmarks:
# - reverse complementing 10g FASTA
# - printing all 16-mers from 10g FASTA
# - count number of CpG islands (e.g. all CG-only subseqs)

import seqlib

def split(s, k, step):
   i = 0
   while i + k < len(s):
      yield s[i:i + k]
      i += step

def is_cpg(s):
   return s == s'C' or s == s'G'

def cpg_count(s):
   i = 0
   total = 0
   while i < len(s):
      if is_cpg(s[i]):
         j = i + 1
         while j < len(s) and is_cpg(s[j]):
            j += 1
         total += 1
         i = j + 1
      else: i += 1
   return total

def revcomp(c):
   return (s'A' if c == s'T' else \
          (s'C' if c == s'G' else \
          (s'G' if c == s'C' else \
          (s'T' if c == s'A' else c))))

def rc_copy(s):
   cp = s.__copy__()
   for i in range(len(s)):
      cp[i] = revcomp(s[len(s) - i - 1])
   return cp

# will need timing constructs
f = File(__argv__[2])
match __argv__[3]:
   case '1': 
      total = 0
      for l in f:
         total += len(rc_copy(l))
      print total
   case '2': 
      total = 0
      t2 = 0
      for l in f:
         for s in split(l, 16, 1):
            total += len(s)
            t2 += 1
      print total, t2
   case '3':
      total = 0
      for line in f:
         total += cpg_count(line)
      # gen = iter(f) |> cpg_count  not working
      print total
   default: print 'whoops!'
# Seq library 

extend int:
   def range(self):
      i = 0
      while i < self:
         yield i
         i += 1
      
def range(i):
   return i.range()

def len(s):
   return s.__len__()

def echo(s):
   print s

def iter(f):
   for i in f.__iter__():
      yield i

extern c free(m: ptr[byte]) -> void

def os_system(s):
   extern c system(m: ptr[byte]) -> int
   return system(s.ptr)

# class Str(buf: ptr[ptr[byte]], sz: ptr[int]):
#    def __init__(self):
#       self.buf = ptr[ptr[byte]](1)
#       self.sz = ptr[int](1)

#    def __del__(self):
#       print 'str::del called'
#       if self.buf[0]:
#          free(self.buf[0])

#    def __str__(self):
#       return str(self.buf[0], self.sz[0])

# s = Str()

class File(fp: ptr[byte], buf: ptr[ptr[byte]], sz: ptr[int]):
   def __init__(self, path: str):
      print 'file/init called'
      
      extern c fopen(f: ptr[byte], m: ptr[byte]) -> ptr[byte]
      self.fp = fopen(path.ptr, "rb".ptr)

      self.buf = ptr[ptr[byte]](1)
      self.sz = ptr[int](1)

   def __del__(self):
      print 'file/del called'

      extern c fclose(f: ptr[byte]) -> int
      if self.fp:
         fclose(self.fp)
      if self.buf:
         free(self.buf[0])

   def __iter__(self):
      extern c getline(lineptr: ptr[ptr[byte]], n: ptr[int], file: ptr[byte]) -> int
      while True:
         rd = getline(self.buf, self.sz, self.fp)
         if rd != -1:
            if self.buf[0][rd - 1] == byte(10):
               rd -= 1
            yield seq(self.buf[0], rd)
         else:
            break


import sys, time

def pad(x, n, w):
  s = str(x)
  if len(s) < n:
    return s + (w * (n - len(s))) 
  return s

def hashcnt[K](s: seq):
  d = dict[K, int]()
  for k in s.kmers[K](1):
    d[k] = d.get(k, 0) + 1
  return d

def cnt[K](s: seq, q: K):
  d = hashcnt[K](s)
  print str(d.get(q, 0)) + "\t" + str(q)

def freq[K](s: seq):
  def sf[T](a: tuple[T, int], b: tuple[T, int]):
    return a[1] > b[1]

  d1 = hashcnt[k1](s)
  for k, v in sorted_cmp(list(d1.items()), sf[k1]):
    print k, pad(round((100.0 * v) / len(s), 3), 6, '0')
  print 

  d2 = hashcnt[k2](s)
  for k, v in sorted_cmp(list(d2.items()), sf[k2]):
    print k, pad(round((100.0 * v) / (len(s)-1), 3), 5, '0')
  print

def process(sq):
  freq(sq)
  cnt(sq, k3(s'GGT'))
  cnt(sq, k4(s'GGTA'))
  cnt(sq, k6(s'GGTATT'))
  cnt(sq, k12(s'GGTATTTTAATT'))
  cnt(sq, k18(s'GGTATTTTAATTTATAGT'))

t = time.time()
for line in sys.stdin:
  if line[:6] == '>THREE':
    l = list[str]()
    for line in sys.stdin:
      if line[0] == '>': break
      l.append(line)
    s = seq(str.cat(l))
    process(s)
    break
